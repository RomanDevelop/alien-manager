#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —É—Å–ª–æ–≤–∏–π –ø—Ä–µ—Å–µ–π–ª–∞
"""

from web3 import Web3
from config import w3, presale_contract, WALLET_ADDRESS
import os
from dotenv import load_dotenv
from datetime import datetime

load_dotenv()

def check_presale_conditions():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —É—Å–ª–æ–≤–∏—è –ø—Ä–µ—Å–µ–π–ª–∞"""
    
    if not presale_contract:
        print("‚ùå –ü—Ä–µ—Å–µ–π–ª –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return
    
    try:
        print("üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –ø—Ä–µ—Å–µ–π–ª–∞ ALIEN")
        print("=" * 50)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        print("\nüìä –û–°–ù–û–í–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´:")
        print("-" * 30)
        
        # –ê–¥—Ä–µ—Å –ø—Ä–µ—Å–µ–π–ª–∞
        presale_address = presale_contract.address
        print(f"üìç –ê–¥—Ä–µ—Å –ø—Ä–µ—Å–µ–π–ª–∞: {presale_address}")
        
        # –ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞
        token_address = presale_contract.functions.token().call()
        print(f"üëΩ –ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞: {token_address}")
        
        # –¶–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞
        token_price_wei = presale_contract.functions.tokenPrice().call()
        token_price_matic = token_price_wei / 10**18
        print(f"üí∞ –¶–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞: {token_price_matic} MATIC (${token_price_matic * 0.9:.6f})")
        
        # Hardcap
        hardcap_wei = presale_contract.functions.hardCap().call()
        hardcap_matic = hardcap_wei / 10**18
        print(f"üéØ Hardcap: {hardcap_matic} MATIC (${hardcap_matic * 0.9:.2f})")
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏
        print("\n‚è∞ –í–†–ï–ú–ï–ù–ù–´–ï –†–ê–ú–ö–ò:")
        print("-" * 30)
        
        current_time = presale_contract.functions.getPresaleInfo().call()[0]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º startTime –∫–∞–∫ –±–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è
        start_time = presale_contract.functions.startTime().call()
        end_time = presale_contract.functions.endTime().call()
        
        current_dt = datetime.fromtimestamp(current_time)
        start_dt = datetime.fromtimestamp(start_time)
        end_dt = datetime.fromtimestamp(end_time)
        
        print(f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_dt.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üöÄ –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞: {start_dt.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"‚èπ –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_dt.strftime('%Y-%m-%d %H:%M:%S')}")
        
        # –°—Ç–∞—Ç—É—Å –ø—Ä–µ—Å–µ–π–ª–∞
        print("\nüìà –°–¢–ê–¢–£–° –ü–†–ï–°–ï–ô–õ–ê:")
        print("-" * 30)
        
        total_raised_wei = presale_contract.functions.totalRaised().call()
        total_raised_matic = total_raised_wei / 10**18
        print(f"üí∞ –°–æ–±—Ä–∞–Ω–æ: {total_raised_matic} MATIC")
        
        remaining_cap_wei = hardcap_wei - total_raised_wei
        remaining_cap_matic = remaining_cap_wei / 10**18
        print(f"üéØ –û—Å—Ç–∞–ª–æ—Å—å: {remaining_cap_matic} MATIC")
        
        progress_percent = (total_raised_matic / hardcap_matic) * 100
        print(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_percent:.2f}%")
        
        # –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        is_paused = presale_contract.functions.paused().call()
        is_active = presale_contract.functions.getPresaleInfo().call()[6]  # _isActive
        
        print(f"‚è∏ –ü–∞—É–∑–∞: {'–î–∞' if is_paused else '–ù–µ—Ç'}")
        print(f"‚úÖ –ê–∫—Ç–∏–≤–µ–Ω: {'–î–∞' if is_active else '–ù–µ—Ç'}")
        
        # –†–∞—Å—á–µ—Ç—ã —Ç–æ–∫–µ–Ω–æ–≤
        print("\nüßÆ –†–ê–°–ß–ï–¢–´ –¢–û–ö–ï–ù–û–í:")
        print("-" * 30)
        
        tokens_for_sale = hardcap_matic / token_price_matic
        print(f"üéØ –¢–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {tokens_for_sale:,.0f} ALIEN")
        
        tokens_sold = total_raised_matic / token_price_matic
        print(f"üí∞ –ü—Ä–æ–¥–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {tokens_sold:,.0f} ALIEN")
        
        tokens_remaining = tokens_for_sale - tokens_sold
        print(f"üì¶ –û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–∫–µ–Ω–æ–≤: {tokens_remaining:,.0f} ALIEN")
        
        # –ü—Ä–∏–º–µ—Ä—ã –ø–æ–∫—É–ø–æ–∫
        print("\nüí° –ü–†–ò–ú–ï–†–´ –ü–û–ö–£–ü–û–ö:")
        print("-" * 30)
        
        examples = [0.01, 0.1, 1, 10]
        for amount in examples:
            tokens = amount / token_price_matic
            usd_cost = amount * 0.9
            print(f"üí∏ {amount} MATIC ‚Üí {tokens:,.0f} ALIEN (${usd_cost:.2f})")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ
        print("\nüëë –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –í–õ–ê–î–ï–õ–¨–¶–ï:")
        print("-" * 30)
        
        owner = presale_contract.functions.owner().call()
        print(f"üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {owner}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
        if WALLET_ADDRESS:
            wallet_checksum = Web3.to_checksum_address(WALLET_ADDRESS)
            is_owner = owner.lower() == wallet_checksum.lower()
            print(f"üîë –í—ã –≤–ª–∞–¥–µ–ª–µ—Ü: {'–î–∞' if is_owner else '–ù–µ—Ç'}")
        
        # –ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –ø—Ä–µ—Å–µ–π–ª–µ
        print("\nüè¶ –ë–ê–õ–ê–ù–°–´:")
        print("-" * 30)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞
        from config import token_contract
        if token_contract:
            presale_token_balance = token_contract.functions.balanceOf(presale_address).call()
            presale_token_balance_human = presale_token_balance / 10**18
            print(f"üëΩ –¢–æ–∫–µ–Ω–æ–≤ –Ω–∞ –ø—Ä–µ—Å–µ–π–ª–µ: {presale_token_balance_human:,.0f} ALIEN")
        
        # –°—Å—ã–ª–∫–∏
        print("\nüîó –ü–û–õ–ï–ó–ù–´–ï –°–°–´–õ–ö–ò:")
        print("-" * 30)
        print(f"üìä –ü—Ä–µ—Å–µ–π–ª: https://polygonscan.com/address/{presale_address}")
        print(f"üëΩ –¢–æ–∫–µ–Ω: https://polygonscan.com/address/{token_address}")
        
        print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")

if __name__ == "__main__":
    check_presale_conditions() 