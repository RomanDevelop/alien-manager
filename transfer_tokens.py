#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –ø—Ä–µ—Å–µ–π–ª –∫–æ–Ω—Ç—Ä–∞–∫—Ç
"""

from web3 import Web3
from config import w3, token_contract, WALLET_ADDRESS, PRIVATE_KEY, PRESALE_ADDRESS
import os
from dotenv import load_dotenv

load_dotenv()

def transfer_tokens_to_presale(amount):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–æ–∫–µ–Ω—ã –Ω–∞ –ø—Ä–µ—Å–µ–π–ª –∫–æ–Ω—Ç—Ä–∞–∫—Ç"""
    
    if not token_contract:
        print("‚ùå –¢–æ–∫–µ–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return
    
    if not PRESALE_ADDRESS:
        print("‚ùå –ê–¥—Ä–µ—Å –ø—Ä–µ—Å–µ–π–ª–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        wallet_address_checksum = Web3.to_checksum_address(WALLET_ADDRESS)
        balance = token_contract.functions.balanceOf(wallet_address_checksum).call()
        balance_human = balance / 10**18
        
        print(f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance_human:,.0f} ALIEN")
        print(f"üì§ –ü–µ—Ä–µ–≤–æ–¥–∏–º: {amount:,.0f} ALIEN")
        print(f"üìç –ù–∞ –ø—Ä–µ—Å–µ–π–ª: {PRESALE_ADDRESS}")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ wei
        amount_wei = amount * 10**18
        
        if amount_wei > balance:
            print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤. –î–æ—Å—Ç—É–ø–Ω–æ: {balance_human:,.0f}")
            return
        
        # –°—Ç—Ä–æ–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        nonce = w3.eth.get_transaction_count(wallet_address_checksum)
        
        # –ü–æ–ª—É—á–∞–µ–º gas price
        gas_price = w3.eth.gas_price
        
        # –°—Ç—Ä–æ–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction = token_contract.functions.transfer(
            Web3.to_checksum_address(PRESALE_ADDRESS),
            amount_wei
        ).build_transaction({
            'from': Web3.to_checksum_address(WALLET_ADDRESS),
            'nonce': nonce,
            'gas': 200000,
            'gasPrice': gas_price
        })
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        private_key_with_0x = f"0x{PRIVATE_KEY}" if not PRIVATE_KEY.startswith('0x') else PRIVATE_KEY
        signed_txn = w3.eth.account.sign_transaction(transaction, private_key_with_0x)
        tx_hash = w3.eth.send_raw_transaction(signed_txn.raw_transaction)
        
        print(f"‚è≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {tx_hash.hex()}")
        
        # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        receipt = w3.eth.wait_for_transaction_receipt(tx_hash)
        
        if receipt.status == 1:
            print("‚úÖ –¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ –ø—Ä–µ—Å–µ–π–ª!")
            print(f"üîó Polygonscan: https://polygonscan.com/tx/{tx_hash.hex()}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
            new_balance = token_contract.functions.balanceOf(wallet_address_checksum).call()
            new_balance_human = new_balance / 10**18
            print(f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance_human:,.0f} ALIEN")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø—Ä–µ—Å–µ–π–ª–∞
            presale_balance = token_contract.functions.balanceOf(PRESALE_ADDRESS).call()
            presale_balance_human = presale_balance / 10**18
            print(f"üè¶ –ë–∞–ª–∞–Ω—Å –ø—Ä–µ—Å–µ–π–ª–∞: {presale_balance_human:,.0f} ALIEN")
            
        else:
            print("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python transfer_tokens.py <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Ç–æ–∫–µ–Ω–æ–≤>")
        print("–ü—Ä–∏–º–µ—Ä: python transfer_tokens.py 400000000")
        sys.exit(1)
    
    try:
        amount = int(sys.argv[1])
        transfer_tokens_to_presale(amount)
    except ValueError:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ.")
        sys.exit(1) 