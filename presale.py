from web3 import Web3
from config import w3, presale_contract, PRIVATE_KEY, WALLET_ADDRESS

def get_presale_status():
    """
    –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–µ—Å–µ–π–ª–∞
    
    Returns:
        dict: –°—Ç–∞—Ç—É—Å –ø—Ä–µ—Å–µ–π–ª–∞
    """
    if not presale_contract:
        return {"error": "–ü—Ä–µ—Å–µ–π–ª –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        current_time = w3.eth.get_block('latest').timestamp
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–µ—Å–µ–π–ª–∞
        start_time = presale_contract.functions.startTime().call()
        end_time = presale_contract.functions.endTime().call()
        hard_cap = presale_contract.functions.hardCap().call()
        total_raised = presale_contract.functions.totalRaised().call()
        paused = presale_contract.functions.paused().call()
        token_price = presale_contract.functions.tokenPrice().call()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        is_active = current_time >= start_time and current_time <= end_time and not paused
        is_before_start = current_time < start_time
        is_after_end = current_time > end_time
        is_paused = paused
        is_hardcap_reached = total_raised >= hard_cap
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        start_time_readable = w3.from_wei(start_time, 'ether') if start_time > 0 else 0
        end_time_readable = w3.from_wei(end_time, 'ether') if end_time > 0 else 0
        hard_cap_matic = w3.from_wei(hard_cap, 'ether')
        total_raised_matic = w3.from_wei(total_raised, 'ether')
        token_price_matic = w3.from_wei(token_price, 'ether')
        
        return {
            "status": "–ü—Ä–µ—Å–µ–π–ª –∫–æ–Ω—Ç—Ä–∞–∫—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω",
            "address": presale_contract.address,
            "current_time": current_time,
            "start_time": start_time,
            "end_time": end_time,
            "hard_cap": hard_cap,
            "total_raised": total_raised,
            "paused": paused,
            "token_price": token_price,
            "is_active": is_active,
            "is_before_start": is_before_start,
            "is_after_end": is_after_end,
            "is_paused": is_paused,
            "is_hardcap_reached": is_hardcap_reached,
            "remaining_cap": hard_cap - total_raised,
            "progress_percent": (total_raised / hard_cap * 100) if hard_cap > 0 else 0
        }
        
    except Exception as e:
        return {"error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"}

def buy_tokens(amount_matic):
    """
    –ö—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω—ã ALIEN –∑–∞ MATIC
    
    Args:
        amount_matic (float): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ MATIC –¥–ª—è –ø–æ–∫—É–ø–∫–∏
    
    Returns:
        str: –•–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    """
    if not presale_contract:
        raise ValueError("–ü—Ä–µ—Å–µ–π–ª –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env")
    
    if not PRIVATE_KEY or PRIVATE_KEY == 'your_private_key':
        raise ValueError("–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–µ—Å–µ–π–ª–∞
        status = get_presale_status()
        if "error" in status:
            raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {status['error']}")
        
        if not status.get("is_active", False):
            if status.get("is_before_start", False):
                raise ValueError("–ü—Ä–µ—Å–µ–π–ª –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª—Å—è")
            elif status.get("is_after_end", False):
                raise ValueError("–ü—Ä–µ—Å–µ–π–ª —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è")
            elif status.get("is_paused", False):
                raise ValueError("–ü—Ä–µ—Å–µ–π–ª –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            else:
                raise ValueError("–ü—Ä–µ—Å–µ–π–ª –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
        
        if status.get("is_hardcap_reached", False):
            raise ValueError("Hardcap –¥–æ—Å—Ç–∏–≥–Ω—É—Ç")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º MATIC –≤ Wei
        amount_wei = w3.to_wei(amount_matic, 'ether')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ —Å—É–º–º–∞ –æ—Å—Ç–∞–≤—à–∏–π—Å—è hardcap
        remaining_cap = status.get("remaining_cap", 0)
        if amount_wei > remaining_cap:
            raise ValueError(f"–°—É–º–º–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –æ—Å—Ç–∞–≤—à–∏–π—Å—è hardcap. –ú–∞–∫—Å–∏–º—É–º: {w3.from_wei(remaining_cap, 'ether')} MATIC")
        
        # –ü–æ–ª—É—á–∞–µ–º nonce
        wallet_address = Web3.to_checksum_address(WALLET_ADDRESS)
        nonce = w3.eth.get_transaction_count(wallet_address)
        
        # –°—Ç—Ä–æ–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction = presale_contract.functions.buyTokens().build_transaction({
            'from': wallet_address,
            'value': amount_wei,
            'nonce': nonce,
            'gas': 200000,  # –ú–æ–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å
            'gasPrice': w3.eth.gas_price
        })
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        private_key_with_0x = f"0x{PRIVATE_KEY}" if not PRIVATE_KEY.startswith('0x') else PRIVATE_KEY
        signed_txn = w3.eth.account.sign_transaction(transaction, private_key_with_0x)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        tx_hash = w3.eth.send_raw_transaction(signed_txn.raw_transaction)
        
        return tx_hash.hex()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ: {str(e)}")
        print(f"üîç –î–µ—Ç–∞–ª–∏: {type(e).__name__}")
        raise e

def claim_tokens():
    """
    –ó–∞–±—Ä–∞—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
    
    Returns:
        str: –•–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    """
    if not presale_contract:
        raise ValueError("–ü—Ä–µ—Å–µ–π–ª –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env")
    
    if not PRIVATE_KEY or PRIVATE_KEY == 'your_private_key':
        raise ValueError("–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –∑–∞–±–æ—Ä–∞
        wallet_address = Web3.to_checksum_address(WALLET_ADDRESS)
        claimable_tokens = presale_contract.functions.claimableTokens(wallet_address).call()
        
        if claimable_tokens == 0:
            raise ValueError("–ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∑–∞–±–æ—Ä–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º nonce
        nonce = w3.eth.get_transaction_count(wallet_address)
        
        # –°—Ç—Ä–æ–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction = presale_contract.functions.claimTokens().build_transaction({
            'from': wallet_address,
            'nonce': nonce,
            'gas': 150000,  # –ú–æ–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å
            'gasPrice': w3.eth.gas_price
        })
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        private_key_with_0x = f"0x{PRIVATE_KEY}" if not PRIVATE_KEY.startswith('0x') else PRIVATE_KEY
        signed_txn = w3.eth.account.sign_transaction(transaction, private_key_with_0x)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        tx_hash = w3.eth.send_raw_transaction(signed_txn.raw_transaction)
        
        return tx_hash.hex()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–±–æ—Ä–µ —Ç–æ–∫–µ–Ω–æ–≤: {str(e)}")
        print(f"üîç –î–µ—Ç–∞–ª–∏: {type(e).__name__}")
        raise e

def withdraw_funds():
    """
    –ó–∞–±—Ä–∞—Ç—å —Å–æ–±—Ä–∞–Ω–Ω—ã–µ MATIC (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)
    
    Returns:
        str: –•–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    """
    if not presale_contract:
        raise ValueError("–ü—Ä–µ—Å–µ–π–ª –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env")
    
    if not PRIVATE_KEY or PRIVATE_KEY == 'your_private_key':
        raise ValueError("–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º nonce
        wallet_address = Web3.to_checksum_address(WALLET_ADDRESS)
        nonce = w3.eth.get_transaction_count(wallet_address)
        
        # –°—Ç—Ä–æ–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction = presale_contract.functions.withdrawFunds().build_transaction({
            'from': wallet_address,
            'nonce': nonce,
            'gas': 100000,
            'gasPrice': w3.eth.gas_price
        })
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        private_key_with_0x = f"0x{PRIVATE_KEY}" if not PRIVATE_KEY.startswith('0x') else PRIVATE_KEY
        signed_txn = w3.eth.account.sign_transaction(transaction, private_key_with_0x)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        tx_hash = w3.eth.send_raw_transaction(signed_txn.raw_transaction)
        
        return tx_hash.hex()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–±–æ—Ä–µ —Å—Ä–µ–¥—Å—Ç–≤: {str(e)}")
        print(f"üîç –î–µ—Ç–∞–ª–∏: {type(e).__name__}")
        raise e

def withdraw_unsold_tokens():
    """
    –ó–∞–±—Ä–∞—Ç—å –Ω–µ—Ä–∞—Å–ø—Ä–æ–¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)
    
    Returns:
        str: –•–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    """
    if not presale_contract:
        raise ValueError("–ü—Ä–µ—Å–µ–π–ª –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env")
    
    if not PRIVATE_KEY or PRIVATE_KEY == 'your_private_key':
        raise ValueError("–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º nonce
        wallet_address = Web3.to_checksum_address(WALLET_ADDRESS)
        nonce = w3.eth.get_transaction_count(wallet_address)
        
        # –°—Ç—Ä–æ–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction = presale_contract.functions.withdrawUnsoldTokens().build_transaction({
            'from': wallet_address,
            'nonce': nonce,
            'gas': 100000,
            'gasPrice': w3.eth.gas_price
        })
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        private_key_with_0x = f"0x{PRIVATE_KEY}" if not PRIVATE_KEY.startswith('0x') else PRIVATE_KEY
        signed_txn = w3.eth.account.sign_transaction(transaction, private_key_with_0x)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        tx_hash = w3.eth.send_raw_transaction(signed_txn.raw_transaction)
        
        return tx_hash.hex()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–±–æ—Ä–µ –Ω–µ—Ä–∞—Å–ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {str(e)}")
        print(f"üîç –î–µ—Ç–∞–ª–∏: {type(e).__name__}")
        raise e

def pause_presale(status):
    """
    –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å/–≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ—Å–µ–π–ª (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)
    
    Args:
        status (bool): True - –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, False - –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å
    
    Returns:
        str: –•–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    """
    if not presale_contract:
        raise ValueError("–ü—Ä–µ—Å–µ–π–ª –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env")
    
    if not PRIVATE_KEY or PRIVATE_KEY == 'your_private_key':
        raise ValueError("–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º nonce
        wallet_address = Web3.to_checksum_address(WALLET_ADDRESS)
        nonce = w3.eth.get_transaction_count(wallet_address)
        
        # –°—Ç—Ä–æ–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction = presale_contract.functions.pausePresale(status).build_transaction({
            'from': wallet_address,
            'nonce': nonce,
            'gas': 100000,
            'gasPrice': w3.eth.gas_price
        })
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        private_key_with_0x = f"0x{PRIVATE_KEY}" if not PRIVATE_KEY.startswith('0x') else PRIVATE_KEY
        signed_txn = w3.eth.account.sign_transaction(transaction, private_key_with_0x)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        tx_hash = w3.eth.send_raw_transaction(signed_txn.raw_transaction)
        
        return tx_hash.hex()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—É–∑—ã: {str(e)}")
        print(f"üîç –î–µ—Ç–∞–ª–∏: {type(e).__name__}")
        raise e

def get_presale_info():
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ—Å–µ–π–ª–µ
    
    Returns:
        dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ—Å–µ–π–ª–µ
    """
    if not presale_contract:
        return {"error": "–ü—Ä–µ—Å–µ–π–ª –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        status = get_presale_status()
        
        if "error" in status:
            return status
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        wallet_address = Web3.to_checksum_address(WALLET_ADDRESS)
        user_contribution = presale_contract.functions.contributions(wallet_address).call()
        user_claimable = presale_contract.functions.claimableTokens(wallet_address).call()
        
        status["user_contribution"] = w3.from_wei(user_contribution, 'ether')
        status["user_claimable_tokens"] = w3.from_wei(user_claimable, 'ether')
        
        return status
        
    except Exception as e:
        return {"error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}"}

def wait_for_transaction(tx_hash, timeout=300):
    """
    –û–∂–∏–¥–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    
    Args:
        tx_hash (str): –•–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        timeout (int): –¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    """
    try:
        receipt = w3.eth.wait_for_transaction_receipt(tx_hash, timeout=timeout)
        
        if receipt.status == 0:
            # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å, –ø–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
            try:
                tx = w3.eth.get_transaction(tx_hash)
                # –ü—ã—Ç–∞–µ–º—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É
                error_msg = "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å"
                if hasattr(receipt, 'logs') and receipt.logs:
                    error_msg = f"–û—à–∏–±–∫–∞: {receipt.logs}"
            except:
                error_msg = "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å (–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏)"
            
            return {
                "success": False,
                "error": error_msg,
                "gas_used": receipt.gasUsed,
                "block_number": receipt.blockNumber
            }
        else:
            return {
                "success": True,
                "gas_used": receipt.gasUsed,
                "block_number": receipt.blockNumber
            }
            
    except Exception as e:
        return {"error": f"–û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {str(e)}"} 