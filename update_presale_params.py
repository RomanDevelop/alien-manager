#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–µ—Å–µ–π–ª–∞
"""

from web3 import Web3
from config import w3, presale_contract, WALLET_ADDRESS, PRIVATE_KEY
import os
from dotenv import load_dotenv
import time

load_dotenv()

def update_token_price(new_price_wei):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ü–µ–Ω—É —Ç–æ–∫–µ–Ω–∞ –≤ –ø—Ä–µ—Å–µ–π–ª–µ"""
    
    if not presale_contract:
        print("‚ùå –ü—Ä–µ—Å–µ–π–ª –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return False
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        current_price = presale_contract.functions.tokenPrice().call()
        current_price_matic = current_price / 10**18
        
        print(f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price_matic} MATIC")
        print(f"üìà –ù–æ–≤–∞—è —Ü–µ–Ω–∞: {new_price_wei / 10**18} MATIC")
        
        # –ü–æ–ª—É—á–∞–µ–º nonce
        wallet_address_checksum = Web3.to_checksum_address(WALLET_ADDRESS)
        nonce = w3.eth.get_transaction_count(wallet_address_checksum)
        
        # –ü–æ–ª—É—á–∞–µ–º gas price
        gas_price = w3.eth.gas_price
        
        # –°—Ç—Ä–æ–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction = presale_contract.functions.updateTokenPrice(new_price_wei).build_transaction({
            'from': wallet_address_checksum,
            'nonce': nonce,
            'gas': 150000,
            'gasPrice': gas_price
        })
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        private_key_with_0x = f"0x{PRIVATE_KEY}" if not PRIVATE_KEY.startswith('0x') else PRIVATE_KEY
        signed_txn = w3.eth.account.sign_transaction(transaction, private_key_with_0x)
        tx_hash = w3.eth.send_raw_transaction(signed_txn.raw_transaction)
        
        print(f"‚è≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {tx_hash.hex()}")
        
        # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        receipt = w3.eth.wait_for_transaction_receipt(tx_hash)
        
        if receipt.status == 1:
            print("‚úÖ –¶–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            print(f"üîó Polygonscan: https://polygonscan.com/tx/{tx_hash.hex()}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—É—é —Ü–µ–Ω—É
            new_price = presale_contract.functions.tokenPrice().call()
            new_price_matic = new_price / 10**18
            print(f"üí∞ –ù–æ–≤–∞—è —Ü–µ–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: {new_price_matic} MATIC")
            return True
            
        else:
            print("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def update_hard_cap(new_hard_cap_wei):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç hardcap –ø—Ä–µ—Å–µ–π–ª–∞"""
    
    if not presale_contract:
        print("‚ùå –ü—Ä–µ—Å–µ–π–ª –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return False
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π hardcap
        current_hard_cap = presale_contract.functions.hardCap().call()
        current_hard_cap_matic = current_hard_cap / 10**18
        
        print(f"üí∞ –¢–µ–∫—É—â–∏–π hardcap: {current_hard_cap_matic} MATIC")
        print(f"üìà –ù–æ–≤—ã–π hardcap: {new_hard_cap_wei / 10**18} MATIC")
        
        # –ü–æ–ª—É—á–∞–µ–º nonce
        wallet_address_checksum = Web3.to_checksum_address(WALLET_ADDRESS)
        nonce = w3.eth.get_transaction_count(wallet_address_checksum)
        
        # –ü–æ–ª—É—á–∞–µ–º gas price
        gas_price = w3.eth.gas_price
        
        # –°—Ç—Ä–æ–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction = presale_contract.functions.updateHardCap(new_hard_cap_wei).build_transaction({
            'from': wallet_address_checksum,
            'nonce': nonce,
            'gas': 150000,
            'gasPrice': gas_price
        })
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        private_key_with_0x = f"0x{PRIVATE_KEY}" if not PRIVATE_KEY.startswith('0x') else PRIVATE_KEY
        signed_txn = w3.eth.account.sign_transaction(transaction, private_key_with_0x)
        tx_hash = w3.eth.send_raw_transaction(signed_txn.raw_transaction)
        
        print(f"‚è≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {tx_hash.hex()}")
        
        # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        receipt = w3.eth.wait_for_transaction_receipt(tx_hash)
        
        if receipt.status == 1:
            print("‚úÖ Hardcap —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
            print(f"üîó Polygonscan: https://polygonscan.com/tx/{tx_hash.hex()}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π hardcap
            new_hard_cap = presale_contract.functions.hardCap().call()
            new_hard_cap_matic = new_hard_cap / 10**18
            print(f"üí∞ –ù–æ–≤—ã–π hardcap –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: {new_hard_cap_matic} MATIC")
            return True
            
        else:
            print("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def update_presale_times(new_start_time, new_end_time):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–µ—Å–µ–π–ª–∞"""
    
    if not presale_contract:
        print("‚ùå –ü—Ä–µ—Å–µ–π–ª –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return False
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –≤—Ä–µ–º–µ–Ω–∞
        current_start_time = presale_contract.functions.startTime().call()
        current_end_time = presale_contract.functions.endTime().call()
        
        print(f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {time.ctime(current_start_time)}")
        print(f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {time.ctime(current_end_time)}")
        print(f"üìÖ –ù–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {time.ctime(new_start_time)}")
        print(f"üìÖ –ù–æ–≤–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {time.ctime(new_end_time)}")
        
        # –ü–æ–ª—É—á–∞–µ–º nonce
        wallet_address_checksum = Web3.to_checksum_address(WALLET_ADDRESS)
        nonce = w3.eth.get_transaction_count(wallet_address_checksum)
        
        # –ü–æ–ª—É—á–∞–µ–º gas price
        gas_price = w3.eth.gas_price
        
        # –°—Ç—Ä–æ–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction = presale_contract.functions.updatePresaleTimes(new_start_time, new_end_time).build_transaction({
            'from': wallet_address_checksum,
            'nonce': nonce,
            'gas': 200000,
            'gasPrice': gas_price
        })
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        private_key_with_0x = f"0x{PRIVATE_KEY}" if not PRIVATE_KEY.startswith('0x') else PRIVATE_KEY
        signed_txn = w3.eth.account.sign_transaction(transaction, private_key_with_0x)
        tx_hash = w3.eth.send_raw_transaction(signed_txn.raw_transaction)
        
        print(f"‚è≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {tx_hash.hex()}")
        
        # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        receipt = w3.eth.wait_for_transaction_receipt(tx_hash)
        
        if receipt.status == 1:
            print("‚úÖ –í—Ä–µ–º—è –ø—Ä–µ—Å–µ–π–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            print(f"üîó Polygonscan: https://polygonscan.com/tx/{tx_hash.hex()}")
            return True
            
        else:
            print("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def show_current_params():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–µ—Å–µ–π–ª–∞"""
    
    if not presale_contract:
        print("‚ùå –ü—Ä–µ—Å–µ–π–ª –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        start_time = presale_contract.functions.startTime().call()
        end_time = presale_contract.functions.endTime().call()
        hard_cap = presale_contract.functions.hardCap().call()
        token_price = presale_contract.functions.tokenPrice().call()
        total_raised = presale_contract.functions.totalRaised().call()
        paused = presale_contract.functions.paused().call()
        
        print("üìä –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–µ—Å–µ–π–ª–∞:")
        print("=" * 50)
        print(f"‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {time.ctime(start_time)}")
        print(f"‚è∞ –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {time.ctime(end_time)}")
        print(f"üí∞ Hardcap: {hard_cap / 10**18} MATIC")
        print(f"üíé –¶–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞: {token_price / 10**18} MATIC")
        print(f"üìà –°–æ–±—Ä–∞–Ω–æ: {total_raised / 10**18} MATIC")
        print(f"‚è∏Ô∏è  –ü–∞—É–∑–∞: {'–î–∞' if paused else '–ù–µ—Ç'}")
        print(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {(total_raised / hard_cap * 100):.2f}%")
        print()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def update_to_optimal_params():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
    
    print("üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
    print("=" * 60)
    
    # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    optimal_price = 0.0001  # 0.0001 MATIC
    optimal_hardcap = 500   # 500 MATIC
    optimal_duration_days = 30  # 30 –¥–Ω–µ–π
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –≤—Ä–µ–º–µ–Ω–∞
    current_time = int(time.time())
    new_start_time = current_time + 300  # –ù–∞—á–∏–Ω–∞–µ–º —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
    new_end_time = new_start_time + (optimal_duration_days * 24 * 60 * 60)  # 30 –¥–Ω–µ–π
    
    print(f"üí∞ –ù–æ–≤–∞—è —Ü–µ–Ω–∞: {optimal_price} MATIC")
    print(f"üìà –ù–æ–≤—ã–π hardcap: {optimal_hardcap} MATIC")
    print(f"‚è∞ –ù–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {time.ctime(new_start_time)}")
    print(f"‚è∞ –ù–æ–≤–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {time.ctime(new_end_time)}")
    print()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    success = True
    
    # 1. –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
    print("1Ô∏è‚É£ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–∞...")
    if not update_token_price(int(optimal_price * 10**18)):
        success = False
    print()
    
    # 2. –û–±–Ω–æ–≤–ª—è–µ–º hardcap
    print("2Ô∏è‚É£ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ hardcap...")
    if not update_hard_cap(int(optimal_hardcap * 10**18)):
        success = False
    print()
    
    # 3. –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
    print("3Ô∏è‚É£ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–µ—Å–µ–π–ª–∞...")
    if not update_presale_times(new_start_time, new_end_time):
        success = False
    print()
    
    if success:
        print("‚úÖ –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        print("üìä –ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
        show_current_params()
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å")

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python update_presale_params.py show                    - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        print("  python update_presale_params.py price <—Ü–µ–Ω–∞>            - –æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É")
        print("  python update_presale_params.py hardcap <hardcap>       - –æ–±–Ω–æ–≤–∏—Ç—å hardcap")
        print("  python update_presale_params.py time <start> <end>      - –æ–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è")
        print("  python update_presale_params.py optimal                 - –æ–±–Ω–æ–≤–∏—Ç—å –¥–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
        print()
        print("–ü—Ä–∏–º–µ—Ä—ã:")
        print("  python update_presale_params.py price 0.0001")
        print("  python update_presale_params.py hardcap 500")
        print("  python update_presale_params.py optimal")
        sys.exit(1)
    
    command = sys.argv[1]
    
    if command == "show":
        show_current_params()
    
    elif command == "price":
        if len(sys.argv) != 3:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É")
            sys.exit(1)
        try:
            new_price = float(sys.argv[2])
            update_token_price(int(new_price * 10**18))
        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞")
    
    elif command == "hardcap":
        if len(sys.argv) != 3:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π hardcap")
            sys.exit(1)
        try:
            new_hardcap = float(sys.argv[2])
            update_hard_cap(int(new_hardcap * 10**18))
        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π hardcap")
    
    elif command == "time":
        if len(sys.argv) != 4:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è")
            sys.exit(1)
        try:
            start_time = int(sys.argv[2])
            end_time = int(sys.argv[3])
            update_presale_times(start_time, end_time)
        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è")
    
    elif command == "optimal":
        update_to_optimal_params()
    
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
        sys.exit(1) 