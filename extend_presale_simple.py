#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø—Ä–µ—Å–µ–π–ª–∞ ALIEN Token –Ω–∞ 20 –¥–Ω–µ–π
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ update_presale_params.py
"""

import time
from datetime import datetime, timedelta
from web3 import Web3
from web3.middleware import ExtraDataToPOAMiddleware
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def extend_presale_simple():
    """–ü—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –ø—Ä–µ—Å–µ–π–ª –Ω–∞ 20 –¥–Ω–µ–π –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥"""
    
    print("üöÄ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø—Ä–µ—Å–µ–π–ª–∞ ALIEN Token –Ω–∞ 20 –¥–Ω–µ–π")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
    private_key = os.getenv('PRIVATE_KEY')
    wallet_address = os.getenv('WALLET_ADDRESS')
    
    if not private_key or private_key == 'your_private_key_here':
        print("‚ùå –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        print("\nüìù –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:")
        print("PRIVATE_KEY=–≤–∞—à_–ø—Ä–∏–≤–∞—Ç–Ω—ã–π_–∫–ª—é—á_–±–µ–∑_0x")
        print("WALLET_ADDRESS=0x324EB0E51465d70c3D546BeE1cf18F74A01E9924")
        return False
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Polygon
    w3 = Web3(Web3.HTTPProvider('https://polygon-rpc.com'))
    w3.middleware_onion.inject(ExtraDataToPOAMiddleware, layer=0)
    
    if not w3.is_connected():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Polygon RPC")
        return False
    
    # –ê–¥—Ä–µ—Å –ø—Ä–µ—Å–µ–π–ª–∞
    presale_address = '0x2699838c090346Eaf93F96069B56B3637828dFAC'
    
    # ABI –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
    update_abi = [
        {
            'inputs': [
                {'name': '_startTime', 'type': 'uint256'},
                {'name': '_endTime', 'type': 'uint256'}
            ],
            'name': 'updatePresaleTimes',
            'outputs': [],
            'stateMutability': 'nonpayable',
            'type': 'function'
        },
        {
            'inputs': [],
            'name': 'owner',
            'outputs': [{'name': '', 'type': 'address'}],
            'stateMutability': 'view',
            'type': 'function'
        },
        {
            'inputs': [],
            'name': 'startTime',
            'outputs': [{'name': '', 'type': 'uint256'}],
            'stateMutability': 'view',
            'type': 'function'
        },
        {
            'inputs': [],
            'name': 'endTime',
            'outputs': [{'name': '', 'type': 'uint256'}],
            'stateMutability': 'view',
            'type': 'function'
        }
    ]
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
        contract = w3.eth.contract(address=presale_address, abi=update_abi)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
        contract_owner = contract.functions.owner().call()
        if contract_owner.lower() != wallet_address.lower():
            print(f"‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞")
            print(f"–í–ª–∞–¥–µ–ª–µ—Ü: {contract_owner}")
            print(f"–í–∞—à –∞–¥—Ä–µ—Å: {wallet_address}")
            return False
        
        print(f"‚úÖ –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞")
        
        # –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        current_start = contract.functions.startTime().call()
        current_end = contract.functions.endTime().call()
        
        start_dt = datetime.fromtimestamp(current_start)
        end_dt = datetime.fromtimestamp(current_end)
        
        print(f"\nüìä –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
        print(f"üöÄ –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞: {start_dt.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"‚èπ –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_dt.strftime('%Y-%m-%d %H:%M:%S')}")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (20 –¥–Ω–µ–π –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞)
        now = datetime.now()
        new_end = now + timedelta(days=20)
        new_end_timestamp = int(new_end.timestamp())
        
        print(f"\nüìÖ –ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
        print(f"üöÄ –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞: {start_dt.strftime('%Y-%m-%d %H:%M:%S')} (–æ—Å—Ç–∞–µ—Ç—Å—è)")
        print(f"‚èπ –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {new_end.strftime('%Y-%m-%d %H:%M:%S')} (+20 –¥–Ω–µ–π)")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        print(f"\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ü—Ä–µ—Å–µ–π–ª –±—É–¥–µ—Ç –ø—Ä–æ–¥–ª–µ–Ω –¥–æ {new_end.strftime('%Y-%m-%d %H:%M:%S')}")
        confirm = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ")
        
        if confirm.lower() != 'y':
            print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return False
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction = contract.functions.updatePresaleTimes(
            current_start,  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞
            new_end_timestamp  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
        ).build_transaction({
            'from': wallet_address,
            'gas': 300000,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≥–∞–∑
            'gasPrice': w3.eth.gas_price,
            'nonce': w3.eth.get_transaction_count(wallet_address),
        })
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        signed_txn = w3.eth.account.sign_transaction(transaction, private_key)
        
        print(f"\nüìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        tx_hash = w3.eth.send_raw_transaction(signed_txn.raw_transaction)
        
        print(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        print(f"üîó Hash: {tx_hash.hex()}")
        print(f"üîó Polygonscan: https://polygonscan.com/tx/{tx_hash.hex()}")
        
        # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        print(f"\n‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...")
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash, timeout=300)
        
        if tx_receipt.status == 1:
            print(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –≤ –±–ª–æ–∫–µ {tx_receipt.blockNumber}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            new_end_time = contract.functions.endTime().call()
            new_end_dt = datetime.fromtimestamp(new_end_time)
            
            print(f"\nüéâ –ü—Ä–µ—Å–µ–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω!")
            print(f"üìÖ –ù–æ–≤–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {new_end_dt.strftime('%Y-%m-%d %H:%M:%S')}")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
            time_left = new_end_timestamp - int(datetime.now().timestamp())
            days = time_left // 86400
            hours = (time_left % 86400) // 3600
            
            print(f"‚è≥ –î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {days} –¥–Ω–µ–π, {hours} —á–∞—Å–æ–≤")
            
            return True
        else:
            print(f"‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    import os
    success = extend_presale_simple()
    if success:
        print(f"\nüéØ –ü—Ä–µ—Å–µ–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω –Ω–∞ 20 –¥–Ω–µ–π!")
    else:
        print(f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å –ø—Ä–µ—Å–µ–π–ª")
        exit(1)
