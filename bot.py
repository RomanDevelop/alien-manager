#!/usr/bin/env python3
"""
ALIEN Presale Bot - CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
"""

import argparse
import sys
from web3 import Web3

from config import w3, WALLET_ADDRESS
from token_utils import get_matic_balance, get_token_balance, format_balance
from presale import buy_tokens, claim_tokens, get_presale_info, wait_for_transaction, withdraw_funds, withdraw_unsold_tokens, pause_presale
from history import log_action, print_history, get_statistics

def check_balance(address=None):
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã MATIC –∏ ALIEN —Ç–æ–∫–µ–Ω–æ–≤
    
    Args:
        address (str): –ê–¥—Ä–µ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã
        matic_balance = get_matic_balance(address)
        token_balance = get_token_balance(address)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"\nüí∞ –ë–∞–ª–∞–Ω—Å—ã –¥–ª—è –∞–¥—Ä–µ—Å–∞: {address or WALLET_ADDRESS}")
        print("-" * 50)
        print(f"üü£ MATIC: {matic_balance:.4f}")
        print(f"üëΩ ALIEN: {format_balance(token_balance)}")
        print("-" * 50)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        log_action("balance", address=address or WALLET_ADDRESS)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞: {str(e)}")
        log_action("balance", address=address or WALLET_ADDRESS, status="error")

def buy_tokens_cli(amount):
    """
    –ö—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω—ã ALIEN
    
    Args:
        amount (float): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ MATIC –¥–ª—è –ø–æ–∫—É–ø–∫–∏
    """
    try:
        print(f"\nüõí –ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ ALIEN –∑–∞ {amount} MATIC...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å MATIC
        matic_balance = get_matic_balance()
        if matic_balance < amount:
            print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ MATIC. –î–æ—Å—Ç—É–ø–Ω–æ: {matic_balance:.4f}, –Ω—É–∂–Ω–æ: {amount}")
            return
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
        tx_hash = buy_tokens(amount)
        print(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {tx_hash}")
        
        # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...")
        result = wait_for_transaction(tx_hash)
        
        if result.get("success"):
            print(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ë–ª–æ–∫: {result['block_number']}")
            log_action("buy", tx_hash=tx_hash, amount=amount, status="success")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            log_action("buy", tx_hash=tx_hash, amount=amount, status="error")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ç–æ–∫–µ–Ω–æ–≤: {str(e)}")
        log_action("buy", amount=amount, status="error")

def claim_tokens_cli():
    """
    –ó–∞–±—Ä–∞—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
    """
    try:
        print("\nüéÅ –ó–∞–±–∏—Ä–∞–µ–º –∫—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º claim
        tx_hash = claim_tokens()
        print(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {tx_hash}")
        
        # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...")
        result = wait_for_transaction(tx_hash)
        
        if result.get("success"):
            print(f"‚úÖ –¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–∞–Ω—ã! –ë–ª–æ–∫: {result['block_number']}")
            log_action("claim", tx_hash=tx_hash, status="success")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            log_action("claim", tx_hash=tx_hash, status="error")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–±–æ—Ä–µ —Ç–æ–∫–µ–Ω–æ–≤: {str(e)}")
        log_action("claim", status="error")

def show_history(limit=10):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–µ–π—Å—Ç–≤–∏–π
    
    Args:
        limit (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π
    """
    print_history(limit)

def show_stats():
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    """
    stats = get_statistics()
    
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π:")
    print("-" * 30)
    print(f"–í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {stats['total_actions']}")
    
    if stats['total_actions'] > 0:
        print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats['success_rate']:.1f}%")
        print(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {stats['last_action']}")
        print(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑: {stats['last_timestamp']}")
        
        if stats['actions_by_type']:
            print("\n–ü–æ —Ç–∏–ø–∞–º –¥–µ–π—Å—Ç–≤–∏–π:")
            for action, count in stats['actions_by_type'].items():
                print(f"  {action}: {count}")

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI
    """
    parser = argparse.ArgumentParser(
        description="ALIEN Presale Bot - CLI –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–µ–Ω–∞–º–∏ ALIEN",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python bot.py balance                    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å
  python bot.py balance --address 0x123   # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –¥—Ä—É–≥–æ–≥–æ –∞–¥—Ä–µ—Å–∞
  python bot.py buy --amount 1            # –ö—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –∑–∞ 1 MATIC
  python bot.py claim                     # –ó–∞–±—Ä–∞—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
  python bot.py history                   # –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é
  python bot.py stats                     # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        """
    )
    
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # –ö–æ–º–∞–Ω–¥–∞ balance
    balance_parser = subparsers.add_parser('balance', help='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å')
    balance_parser.add_argument('--address', help='–ê–¥—Ä–µ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è WALLET_ADDRESS)')
    
    # –ö–æ–º–∞–Ω–¥–∞ buy
    buy_parser = subparsers.add_parser('buy', help='–ö—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω—ã ALIEN')
    buy_parser.add_argument('--amount', type=float, required=True, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ MATIC –¥–ª—è –ø–æ–∫—É–ø–∫–∏')
    
    # –ö–æ–º–∞–Ω–¥–∞ claim
    subparsers.add_parser('claim', help='–ó–∞–±—Ä–∞—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã')
    
    # –ö–æ–º–∞–Ω–¥–∞ history
    history_parser = subparsers.add_parser('history', help='–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–µ–π—Å—Ç–≤–∏–π')
    history_parser.add_argument('--limit', type=int, default=10, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π')
    
    # –ö–æ–º–∞–Ω–¥–∞ stats
    subparsers.add_parser('stats', help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')
    
    # –ö–æ–º–∞–Ω–¥–∞ info
    subparsers.add_parser('info', help='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ—Å–µ–π–ª–µ')
    
    # –ö–æ–º–∞–Ω–¥—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞
    withdraw_parser = subparsers.add_parser('withdraw', help='–ó–∞–±—Ä–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)')
    withdraw_parser.add_argument('--type', choices=['funds', 'tokens'], required=True, help='–¢–∏–ø –≤—ã–≤–æ–¥–∞: funds (MATIC) –∏–ª–∏ tokens (ALIEN)')
    
    pause_parser = subparsers.add_parser('pause', help='–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å/–≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ—Å–µ–π–ª (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)')
    pause_parser.add_argument('--status', type=bool, required=True, help='True - –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, False - –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏
        if not w3.is_connected():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Polygon RPC")
            sys.exit(1)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã
        if args.command == 'balance':
            check_balance(args.address)
        elif args.command == 'buy':
            buy_tokens_cli(args.amount)
        elif args.command == 'claim':
            claim_tokens_cli()
        elif args.command == 'history':
            show_history(args.limit)
        elif args.command == 'stats':
            show_stats()
        elif args.command == 'info':
            info = get_presale_info()
            print(f"\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ—Å–µ–π–ª–µ:")
            print("-" * 30)
            for key, value in info.items():
                print(f"{key}: {value}")
        elif args.command == 'withdraw':
            if args.type == 'funds':
                print("\nüí∞ –ó–∞–±–∏—Ä–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ MATIC...")
                tx_hash = withdraw_funds()
                print(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {tx_hash}")
                
                result = wait_for_transaction(tx_hash)
                if result.get("success"):
                    print(f"‚úÖ –°—Ä–µ–¥—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–∞–Ω—ã! –ë–ª–æ–∫: {result['block_number']}")
                    log_action("withdraw_funds", tx_hash=tx_hash, status="success")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                    log_action("withdraw_funds", tx_hash=tx_hash, status="error")
            else:  # tokens
                print("\nüéÅ –ó–∞–±–∏—Ä–∞–µ–º –Ω–µ—Ä–∞—Å–ø—Ä–æ–¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã...")
                tx_hash = withdraw_unsold_tokens()
                print(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {tx_hash}")
                
                result = wait_for_transaction(tx_hash)
                if result.get("success"):
                    print(f"‚úÖ –¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–∞–Ω—ã! –ë–ª–æ–∫: {result['block_number']}")
                    log_action("withdraw_tokens", tx_hash=tx_hash, status="success")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                    log_action("withdraw_tokens", tx_hash=tx_hash, status="error")
        elif args.command == 'pause':
            status_text = "–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if args.status else "–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω"
            print(f"\n‚è∏Ô∏è –ü—Ä–µ—Å–µ–π–ª {status_text}...")
            tx_hash = pause_presale(args.status)
            print(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {tx_hash}")
            
            result = wait_for_transaction(tx_hash)
            if result.get("success"):
                print(f"‚úÖ –ü—Ä–µ—Å–µ–π–ª {status_text}! –ë–ª–æ–∫: {result['block_number']}")
                log_action("pause_presale", tx_hash=tx_hash, status="success")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                log_action("pause_presale", tx_hash=tx_hash, status="error")
    
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main() 