#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø—Ä–µ—Å–µ–π–ª–∞ ALIEN Token –Ω–∞ 20 –¥–Ω–µ–π
–£—á–∏—Ç—ã–≤–∞–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º
"""

import os
import time
from datetime import datetime, timedelta
from web3 import Web3
from web3.middleware import ExtraDataToPOAMiddleware
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def extend_presale():
    """–ü—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –ø—Ä–µ—Å–µ–π–ª –Ω–∞ 20 –¥–Ω–µ–π —Å —É—á–µ—Ç–æ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞"""
    
    print("üöÄ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø—Ä–µ—Å–µ–π–ª–∞ ALIEN Token –Ω–∞ 20 –¥–Ω–µ–π (–ò–°–ü–†–ê–í–õ–ï–ù–û)")
    print("=" * 70)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
    private_key = os.getenv('PRIVATE_KEY')
    wallet_address = os.getenv('WALLET_ADDRESS')
    
    if not private_key or private_key == 'your_private_key_here':
        print("‚ùå –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return False
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Polygon
    w3 = Web3(Web3.HTTPProvider('https://polygon-rpc.com'))
    w3.middleware_onion.inject(ExtraDataToPOAMiddleware, layer=0)
    
    if not w3.is_connected():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Polygon RPC")
        return False
    
    # –ê–¥—Ä–µ—Å –ø—Ä–µ—Å–µ–π–ª–∞
    presale_address = '0x2699838c090346Eaf93F96069B56B3637828dFAC'
    
    # ABI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ—Å–µ–π–ª–æ–º
    presale_abi = [
        {
            'inputs': [],
            'name': 'owner',
            'outputs': [{'name': '', 'type': 'address'}],
            'stateMutability': 'view',
            'type': 'function'
        },
        {
            'inputs': [],
            'name': 'startTime',
            'outputs': [{'name': '', 'type': 'uint256'}],
            'stateMutability': 'view',
            'type': 'function'
        },
        {
            'inputs': [],
            'name': 'endTime',
            'outputs': [{'name': '', 'type': 'uint256'}],
            'stateMutability': 'view',
            'type': 'function'
        },
        {
            'inputs': [{'name': '_startTime', 'type': 'uint256'}, {'name': '_endTime', 'type': 'uint256'}],
            'name': 'updatePresaleTimes',
            'outputs': [],
            'stateMutability': 'nonpayable',
            'type': 'function'
        }
    ]
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
        contract = w3.eth.contract(address=presale_address, abi=presale_abi)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
        contract_owner = contract.functions.owner().call()
        if contract_owner.lower() != wallet_address.lower():
            print(f"‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞")
            print(f"–í–ª–∞–¥–µ–ª–µ—Ü: {contract_owner}")
            print(f"–í–∞—à –∞–¥—Ä–µ—Å: {wallet_address}")
            return False
        
        print(f"‚úÖ –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        current_start = contract.functions.startTime().call()
        current_end = contract.functions.endTime().call()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ datetime
        current_start_dt = datetime.fromtimestamp(current_start)
        current_end_dt = datetime.fromtimestamp(current_end)
        
        print(f"\nüìä –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
        print(f"üöÄ –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞: {current_start_dt.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"‚èπ –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {current_end_dt.strftime('%Y-%m-%d %H:%M:%S')}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –±–ª–æ–∫—á–µ–π–Ω–∞
        current_block_time = w3.eth.get_block('latest')['timestamp']
        current_block_dt = datetime.fromtimestamp(current_block_time)
        
        print(f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –±–ª–æ–∫—á–µ–π–Ω–∞: {current_block_dt.strftime('%Y-%m-%d %H:%M:%S')}")
        
        # –í–ê–ñ–ù–û: –ö–æ–Ω—Ç—Ä–∞–∫—Ç —Ç—Ä–µ–±—É–µ—Ç, —á—Ç–æ–±—ã –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –±—ã–ª–æ –≤ –±—É–¥—É—â–µ–º
        # –ü–æ—ç—Ç–æ–º—É —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç + 1 —á–∞—Å
        new_start_timestamp = current_block_time + 3600  # +1 —á–∞—Å
        new_start_dt = datetime.fromtimestamp(new_start_timestamp)
        
        # –ù–æ–≤–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è = –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ + 20 –¥–Ω–µ–π
        new_end_timestamp = new_start_timestamp + (20 * 24 * 3600)  # +20 –¥–Ω–µ–π
        new_end_dt = datetime.fromtimestamp(new_end_timestamp)
        
        print(f"\nüìÖ –ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
        print(f"üöÄ –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞: {new_start_dt.strftime('%Y-%m-%d %H:%M:%S')} (+1 —á–∞—Å –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ)")
        print(f"‚èπ –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {new_end_dt.strftime('%Y-%m-%d %H:%M:%S')} (+20 –¥–Ω–µ–π)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        if new_start_timestamp <= current_block_time:
            print("‚ùå –û—à–∏–±–∫–∞: –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º")
            return False
        
        if new_end_timestamp <= new_start_timestamp:
            print("‚ùå –û—à–∏–±–∫–∞: –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏ —Å—Ç–∞—Ä—Ç–∞")
            return False
        
        print(f"\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ü—Ä–µ—Å–µ–π–ª –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
        print(f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ", end="")
        
        # –í –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º
        confirm = "y"
        print("y")
        
        if confirm.lower() != 'y':
            print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return False
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction = contract.functions.updatePresaleTimes(
            new_start_timestamp,
            new_end_timestamp
        ).build_transaction({
            'from': wallet_address,
            'gas': 300000,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≥–∞–∑
            'gasPrice': w3.eth.gas_price,
            'nonce': w3.eth.get_transaction_count(wallet_address),
        })
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        signed_txn = w3.eth.account.sign_transaction(transaction, private_key)
        
        print(f"\nüìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        tx_hash = w3.eth.send_raw_transaction(signed_txn.raw_transaction)
        
        print(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        print(f"üîó Hash: {tx_hash.hex()}")
        print(f"üîó Polygonscan: https://polygonscan.com/tx/{tx_hash.hex()}")
        
        # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        print(f"\n‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...")
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash, timeout=300)
        
        if tx_receipt.status == 1:
            print(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –≤ –±–ª–æ–∫–µ {tx_receipt.blockNumber}")
            print(f"‚õΩ Gas –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {tx_receipt.gasUsed}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            new_start = contract.functions.startTime().call()
            new_end = contract.functions.endTime().call()
            
            new_start_dt = datetime.fromtimestamp(new_start)
            new_end_dt = datetime.fromtimestamp(new_end)
            
            print(f"\nüéâ –ü—Ä–µ—Å–µ–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω!")
            print(f"üìä –ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
            print(f"üöÄ –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞: {new_start_dt.strftime('%Y-%m-%d %H:%M:%S')}")
            print(f"‚èπ –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {new_end_dt.strftime('%Y-%m-%d %H:%M:%S')}")
            
            return True
        else:
            print(f"‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    success = extend_presale()
    if success:
        print(f"\nüéØ –ü—Ä–µ—Å–µ–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω –Ω–∞ 20 –¥–Ω–µ–π!")
    else:
        print(f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å –ø—Ä–µ—Å–µ–π–ª")
        exit(1)
