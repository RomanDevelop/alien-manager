#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–∞ –≤ –ø—Ä–µ—Å–µ–π–ª–µ
"""

from web3 import Web3
from config import w3, presale_contract, WALLET_ADDRESS, PRIVATE_KEY
import os
from dotenv import load_dotenv

load_dotenv()

def update_token_price(new_price_wei):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ü–µ–Ω—É —Ç–æ–∫–µ–Ω–∞ –≤ –ø—Ä–µ—Å–µ–π–ª–µ"""
    
    if not presale_contract:
        print("‚ùå –ü—Ä–µ—Å–µ–π–ª –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        current_price = presale_contract.functions.tokenPrice().call()
        current_price_matic = current_price / 10**18
        
        print(f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price_matic} MATIC")
        print(f"üìà –ù–æ–≤–∞—è —Ü–µ–Ω–∞: {new_price_wei / 10**18} MATIC")
        
        # –ü–æ–ª—É—á–∞–µ–º nonce
        wallet_address_checksum = Web3.to_checksum_address(WALLET_ADDRESS)
        nonce = w3.eth.get_transaction_count(wallet_address_checksum)
        
        # –ü–æ–ª—É—á–∞–µ–º gas price
        gas_price = w3.eth.gas_price
        
        # –°—Ç—Ä–æ–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction = presale_contract.functions.updateTokenPrice(new_price_wei).build_transaction({
            'from': wallet_address_checksum,
            'nonce': nonce,
            'gas': 150000,
            'gasPrice': gas_price
        })
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        private_key_with_0x = f"0x{PRIVATE_KEY}" if not PRIVATE_KEY.startswith('0x') else PRIVATE_KEY
        signed_txn = w3.eth.account.sign_transaction(transaction, private_key_with_0x)
        tx_hash = w3.eth.send_raw_transaction(signed_txn.raw_transaction)
        
        print(f"‚è≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {tx_hash.hex()}")
        
        # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        receipt = w3.eth.wait_for_transaction_receipt(tx_hash)
        
        if receipt.status == 1:
            print("‚úÖ –¶–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            print(f"üîó Polygonscan: https://polygonscan.com/tx/{tx_hash.hex()}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—É—é —Ü–µ–Ω—É
            new_price = presale_contract.functions.tokenPrice().call()
            new_price_matic = new_price / 10**18
            print(f"üí∞ –ù–æ–≤–∞—è —Ü–µ–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: {new_price_matic} MATIC")
            
        else:
            print("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python update_price.py <–Ω–æ–≤–∞—è_—Ü–µ–Ω–∞_–≤_matic>")
        print("–ü—Ä–∏–º–µ—Ä: python update_price.py 0.0001")
        sys.exit(1)
    
    try:
        new_price_matic = float(sys.argv[1])
        new_price_wei = int(new_price_matic * 10**18)
        update_token_price(new_price_wei)
    except ValueError:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.0001)")
        sys.exit(1) 